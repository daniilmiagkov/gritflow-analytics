import os
import cv2
import numpy as np
import matplotlib.pyplot as plt

from processing.analyzer import analyze_frame
from processing.color_config import Config
from processing.visual_config import VisualizationConfig
from config import OUTPUT_DIR, FRAME_NUMBER  # –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –æ–Ω–∏ —É —Ç–µ–±—è –µ—Å—Ç—å

def load_saved_color(frame_number: int):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ —Ü–≤–µ—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."""
    color_path = os.path.join(OUTPUT_DIR, f"frame_{frame_number}_color.png")

    color = cv2.imread(color_path, cv2.IMREAD_COLOR)
    if color is None:
        raise FileNotFoundError(f"–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {color_path}")
    return color

def plot_diameters(diameters: list, x_positions: list, frame_number: int, title_prefix: str):
    """–°—Ç—Ä–æ–∏—Ç –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—É –∏ –¥–∏–∞–≥—Ä–∞–º–º—É —Ä–∞–∑–º–µ—Ä–æ–≤ —á–∞—Å—Ç–∏—Ü –ø–æ –æ—Å–∏ X –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
    if not diameters or not x_positions:
        print(f"[{title_prefix}] –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤.")
        return

    fig, axs = plt.subplots(2, 1, figsize=(10, 8), sharex=False)

    axs[0].hist(diameters, bins=30, color='skyblue', edgecolor='black')
    axs[0].set_title(f"{title_prefix} ‚Äî –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∏–∞–º–µ—Ç—Ä–æ–≤ (–∫–∞–¥—Ä {frame_number})")
    axs[0].set_xlabel("–î–∏–∞–º–µ—Ç—Ä, –º–º")
    axs[0].set_ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")
    axs[0].grid(True)

    axs[1].scatter(x_positions, diameters,
                   color='orange', edgecolors='black', alpha=0.7)
    axs[1].set_title(f"{title_prefix} ‚Äî –†–∞–∑–º–µ—Ä—ã –ø–æ X (–∫–∞–¥—Ä {frame_number})")
    axs[1].set_xlabel("X-–ø–æ–∑–∏—Ü–∏—è (–ø–∏–∫—Å–µ–ª–∏)")
    axs[1].set_ylabel("–î–∏–∞–º–µ—Ç—Ä, –º–º")
    axs[1].grid(True)

    plt.tight_layout()
    plt.show()

def main():
    configs = [
        ("Small", Config(
            # === –ü–æ—Ä–æ–≥–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ ===
            adaptive_thresh=True,
            adaptive_block_size=25,
            adaptive_C=2,
            use_otsu=False,

            # === –ì–ª–∞–¥–∫–æ—Å—Ç—å –∏ —à—É–º–æ–ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ ===
            median_blur_size=3,

            # === –ú–æ—Ä—Ñ–æ–ª–æ–≥–∏—è ===
            morph_kernel_shape='ellipse',
            morph_kernel_size=3,
            morph_iterations=2,
            dilate_iterations=1,

            # === –î–µ—Ç–µ–∫—Ü–∏—è –∫–æ–Ω—Ç—É—Ä–æ–≤ ===
            min_contour_area=15,
            min_particle_size=5,
            max_particle_size=60,

            # === –ê–Ω–Ω–æ—Ç–∞—Ü–∏–∏ (Bounding Boxes) ===
            bbox_color=(0, 255, 0),
            bbox_thickness=1,
            font_scale=0.5,
            font_thickness=1,

            # === –ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –≤—ã–¥–µ–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–Ω–µ–≥–æ –ø–ª–∞–Ω–∞ ===
            distance_transform_mask=5,
            foreground_threshold_ratio=0.2
        )),
        ("Big", Config(
            # === –ü–æ—Ä–æ–≥–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ ===
            adaptive_thresh=True,
            adaptive_block_size=3,
            adaptive_C=-2,
            use_otsu=False,

            # === –ì–ª–∞–¥–∫–æ—Å—Ç—å –∏ —à—É–º–æ–ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ ===
            median_blur_size=11,

            # === –ú–æ—Ä—Ñ–æ–ª–æ–≥–∏—è ===
            morph_kernel_shape='ellipse',
            morph_kernel_size=3,
            morph_iterations=3,
            dilate_iterations=3,

            # === –î–µ—Ç–µ–∫—Ü–∏—è –∫–æ–Ω—Ç—É—Ä–æ–≤ ===
            min_contour_area=150,
            min_particle_size=5,
            max_particle_size=250,

            # === –ê–Ω–Ω–æ—Ç–∞—Ü–∏–∏ (Bounding Boxes) ===
            bbox_color=(255, 0, 0),
            bbox_thickness=2,
            font_scale=0.7,
            font_thickness=2,

            # === –ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –≤—ã–¥–µ–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–Ω–µ–≥–æ –ø–ª–∞–Ω–∞ ===
            distance_transform_mask=3,
            foreground_threshold_ratio=0.15
        ))
    ]

    vis_cfg = VisualizationConfig(show_plots=True)  # —ç—Ç–æ—Ç —Ñ–ª–∞–≥ –≤—Å—ë –µ—â—ë –≤–ª–∏—è–µ—Ç –Ω–∞ –æ—Ç—Ä–∏—Å–æ–≤–∫—É

    color_np = load_saved_color(FRAME_NUMBER)

    for label, color_cfg in configs:
        print(f"\n=== üîç –ê–Ω–∞–ª–∏–∑: {label} ===")
        c_res, c_diams, c_xs = analyze_frame(
            color_np,
            color_cfg,
            vis_cfg,
            label=label,
            output_dir=OUTPUT_DIR,
            save_plots=True  # –º–æ–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        )

        seg_color_path = os.path.join(OUTPUT_DIR, f"segmented_color_{label.lower()}_{FRAME_NUMBER}.png")
        cv2.imwrite(seg_color_path, c_res)
        print(f"[{label}] –°–µ–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {seg_color_path}")
        # –ì—Ä–∞—Ñ–∏–∫–∏ –∏ –≤—ã–≤–æ–¥
        if c_diams:
            print(f"[Color] –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —á–∞—Å—Ç–∏—Ü: {len(c_diams)}")
            print(f"[Color] –î–∏–∞–ø–∞–∑–æ–Ω –¥–∏–∞–º–µ—Ç—Ä–æ–≤: {min(c_diams):.2f}‚Äì{max(c_diams):.2f} –º–º")
            # plot_diameters(c_diams, c_xs, FRAME_NUMBER, title_prefix="Color")
        else:
            print("[Color] –ß–∞—Å—Ç–∏—Ü—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã.")


if __name__ == "__main__":
    main()

